<assembly xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0 http://maven.apache.org/xsd/assembly-1.1.0.xsd">
  <!--This 'all' id is not appended to the produced bundle because we do this: http://maven.apache.org/plugins/maven-assembly-plugin/faq.html#required-classifiers -->
  <id>all</id>
  <formats>
    <format>tar.gz</format>
  </formats>
  <includeBaseDirectory>true</includeBaseDirectory>
  
  <moduleSets>
    <moduleSet>
      <!-- Enable access to all projects in the current multimodule build. Eclipse 
        says this is an error, but builds from the command line just fine. -->
      <useAllReactorProjects>true</useAllReactorProjects>
       <!-- Include all the sources in the top directory -->
      <sources>
         <fileSets>
          <fileSet>
            <!-- Make sure this excludes is same as the phoenix-hadoop2-compat
                 excludes below -->
            <excludes>
              <exclude>target/</exclude>
              <exclude>test/</exclude>
              <exclude>.classpath</exclude>
              <exclude>.project</exclude>
              <exclude>.settings/</exclude>
            </excludes>
          </fileSet>
        </fileSets>
      </sources>
      <!-- Binaries for the dependencies also go in the lib directory -->
      <binaries>
        <outputDirectory>lib</outputDirectory>
        <unpack>false</unpack>
      </binaries>
    </moduleSet>
  </moduleSets>

  <fileSets>
    <!--This one is weird.  When we assemble src, it'll be default profile which
         at the moment is hadoop1.  But we should include the hadoop2 compat module
         too so can build hadoop2 from src -->
    <fileSet>
      <directory>${project.basedir}/..</directory>
      <fileMode>0644</fileMode>
      <directoryMode>0755</directoryMode>
      <includes>
        <include>phoenix-*</include>
        </includes>
            <excludes>
              <exclude>target/</exclude>
              <exclude>test/</exclude>
              <exclude>.classpath</exclude>
              <exclude>.project</exclude>
              <exclude>.settings/</exclude>
            </excludes>
    </fileSet>
    <fileSet>
      <!--Get misc project files -->
      <directory>${project.basedir}/..</directory>
      <outputDirectory>/</outputDirectory>
      <includes>
        <include>*.txt</include>
        <include>*.md</include>
        <include>pom.xml</include>
      </includes>
    </fileSet>
    <!-- Top level directories -->
    <fileSet>
      <directory>${project.basedir}/../bin</directory>
      <outputDirectory>bin</outputDirectory>
      <fileMode>0644</fileMode>
      <directoryMode>0755</directoryMode>
    </fileSet>
    <fileSet>
      <directory>${project.basedir}/../dev</directory>
      <fileMode>0644</fileMode>
      <directoryMode>0755</directoryMode>
    </fileSet>
    <fileSet>
      <directory>${project.basedir}/../docs</directory>
      <fileMode>0644</fileMode>
      <directoryMode>0755</directoryMode>
    </fileSet>
      <fileSet>
      <directory>${project.basedir}/../examples</directory>
      <fileMode>0644</fileMode>
      <directoryMode>0755</directoryMode>
    </fileSet>
    <!-- Add the client jar. Expects the client jar packaging phase to already be run, 
      which is determined by specification order in the pom. -->
    <fileSet>
      <directory>target</directory>
      <outputDirectory>/</outputDirectory>
      <includes>
        <include>phoenix-*-client.jar</include>
      </includes>
    </fileSet>
  </fileSets>

  <!-- And add all of our dependencies -->
  <dependencySets>
    <dependencySet>
      <!-- Unpack all the dependencies to class files, since java doesn't support 
        jar of jars for running -->
      <unpack>false</unpack>
      <outputDirectory>/lib</outputDirectory>
      <includes>
        <include>commons-configuration:commons-configuration</include>
        <include>commons-io:commons-io</include>
        <include>commons-lang:commons-lang</include>
        <include>commons-logging:commons-logging</include>
        <include>com.google.guava:guava</include>
        <include>org.apache.hadoop:hadoop*</include>
        <include>com.google.protobuf:protobuf-java</include>
        <include>org.slf4j:slf4j-api</include>
        <include>org.slf4j:slf4j-log4j12</include>
        <include>org.apache.zookeeper:zookeeper</include>
        <include>log4j:log4j</include>
        <include>org.apache.hbase:hbase*</include>
        <include>net.sf.opencsv:opencsv</include>
        <include>org.antlr:antlr</include>
      </includes>
    </dependencySet>
    <!-- Separate dependency set to just pull in the jackson stuff since its test 
      scoped and we only include 'runtime' scoped (which includes compile) dependencies -->
    <dependencySet>
      <unpack>false</unpack>
      <scope>test</scope>
      <!-- save these dependencies to the top-level -->
      <outputDirectory>/lib</outputDirectory>
      <includes>
        <include>org.codehaus.jackson:jackson-core-asl</include>
        <include>org.codehaus.jackson:jackson-mapper-asl</include>
      </includes>
    </dependencySet>
  </dependencySets>
</assembly>