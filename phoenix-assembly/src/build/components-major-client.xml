<component>
  <!-- Components that the client needs (except for HBase) -->
  <dependencySets>
    <dependencySet>
      <!-- Unpack all the dependencies to class files, since java doesn't support 
        jar of jars for running -->
      <unpack>true</unpack>
      <!-- save these dependencies to the top-level -->
      <outputDirectory>/</outputDirectory>
      <!-- Maybe a blacklist is easier? -->
      <includes>
        <!-- We use a newer version of guava than HBase - this might be an issue? -->
        <include>com.google.guava:guava</include>
        <!-- HBase also pulls in these dependencies on its own, should we include-them? -->
        <include>com.google.protobuf:protobuf-java</include>
        <include>org.slf4j:slf4j-api</include>
        <include>org.slf4j:slf4j-log4j12</include>
        <include>org.apache.zookeeper:zookeeper</include>
        <include>log4j:log4j</include>
        <include>org.apache.hadoop:hadoop*</include>
        <include>commons-configuration:commons-configuration</include>
        <include>commons-io:commons-io</include>
        <include>commons-logging:commons-logging</include>
        <include>commons-lang:commons-lang</include>
        <include>commons-cli:commons-cli</include>
        <include>org.codehaus.jackson:jackson-mapper-asl</include>
        <include>org.codehaus.jackson:jackson-core-asl</include>
        <include>org.xerial.snappy:snappy-java</include>
      </includes>
    </dependencySet>
  </dependencySets>
</component>
