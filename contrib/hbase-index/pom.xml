<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.salesforce.hbase</groupId>
  <artifactId>hbase-index</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>HBase Index</name>
  <description>Simple Secondary Indexing for HBase</description>
  <packaging>pom</packaging>
  
  <modules>
    <module>index-core</module>
  </modules>

  <distributionManagement>
  <!-- Deploy to own hacked maven repo on github -->
  <!-- Based on the directions here: http://cemerick.com/2010/08/24/hosting-maven-repos-on-github/ -->
  <!-- this isn't the best, but until we get into the 'real' maven repos, this is 
    good enough. We really ought to use the release plugin and push to maven, but meh... -->
  <!-- To publish a snapshot, have a checked out version of hbase-index (in a folder called 
    'hbase-index-maven') in the same directory as hbase-index. For instance... 
      ~/dev/ 
          hbase-index/ 
          hbase-index-maven/ 
    Then switch to the 'maven-artifacts' branch in the other checkout (hbase-index-maven folder)
    Then from the root of this directory, run:
     $ mvn -DaltDeploymentRepository=snapshot-repo::default::file:../hbase-index-maven/snapshots clean deploy -DskipTests
   
    And then, similarly, to do a release:
     1. change the version to the next version (remove the -SNAPSHOT identifier)
     2. run:
      $ mvn -DaltDeploymentRepository=release-repo::default::file:../hbase-index-maven/releases clean deploy -DskipTests
      -->
    <repository>
      <id>repo</id>
      <url>https://git.soma.salesforce.com/hbase/hbase-index/tree/maven-artifacts/raw/master/releases</url>
    </repository>
    <snapshotRepository>
      <id>snapshot-repo</id>
      <url>https://git.soma.salesforce.com/hbase/hbase-index/tree/maven-artifacts/raw/master/snapshots</url>
    </snapshotRepository>
  </distributionManagement>

  <repositories>
    <repository>
      <id>apache release</id>
      <url>https://repository.apache.org/content/repositories/releases/</url>
    </repository>
    <repository>
      <id>apache non-releases</id>
      <name>Apache non-releases</name>
      <url>http://people.apache.org/~stack/m2/repository</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <releases>
        <enabled>true</enabled>
      </releases>
      <!-- Needed to start HBase in tests -->
    </repository>
    <repository>
      <id>codehaus</id>
      <name>Codehaus Public</name>
      <url>http://repository.codehaus.org/</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <releases>
        <enabled>true</enabled>
      </releases>
    </repository>
  </repositories>

  <properties>
    <!-- Default HBase version -->
    <hbase.version>0.94.4</hbase.version>
    <hadoop.version>1.0.4</hadoop.version>
    <jackson.version>1.8.8</jackson.version>
    <guava.version>12.0.1</guava.version>
    <!-- Test properties -->
    <junit.version>4.10</junit.version>
    <mockito-all.version>1.8.5</mockito-all.version>
    <test.timeout>900</test.timeout>
    <test.output.tofile>true</test.output.tofile>
    <!--  Plugin versions -->
    <surefire.version>2.14</surefire.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>com.google.guava</groupId>
        <artifactId>guava</artifactId>
        <version>${guava.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.hadoop</groupId>
        <artifactId>hadoop-core</artifactId>
        <version>${hadoop.version}</version>
        <optional>true</optional>
        <exclusions>
          <exclusion>
            <groupId>hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
          </exclusion>
          <exclusion>
            <groupId>net.sf.kosmosfs</groupId>
            <artifactId>kfs</artifactId>
          </exclusion>
          <exclusion>
            <groupId>org.eclipse.jdt</groupId>
            <artifactId>core</artifactId>
          </exclusion>
          <exclusion>
            <groupId>net.java.dev.jets3t</groupId>
            <artifactId>jets3t</artifactId>
          </exclusion>
          <exclusion>
            <groupId>oro</groupId>
            <artifactId>oro</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.apache.hbase</groupId>
        <artifactId>hbase</artifactId>
        <version>${hbase.version}</version>
      </dependency>
      <!-- Things HBase needs...for some reason -->
      <dependency>
        <groupId>org.codehaus.jackson</groupId>
        <artifactId>jackson-core-asl</artifactId>
        <version>${jackson.version}</version>
      </dependency>
      <dependency>
        <groupId>org.codehaus.jackson</groupId>
        <artifactId>jackson-mapper-asl</artifactId>
        <version>${jackson.version}</version>
      </dependency>
      <dependency>
        <groupId>org.codehaus.jackson</groupId>
        <artifactId>jackson-jaxrs</artifactId>
        <version>${jackson.version}</version>
      </dependency>
      <dependency>
        <groupId>org.codehaus.jackson</groupId>
        <artifactId>jackson-xc</artifactId>
        <version>${jackson.version}</version>
      </dependency>

      <!-- Test Dependencies -->
      <dependency>
        <groupId>org.apache.hbase</groupId>
        <artifactId>hbase</artifactId>
        <version>${hbase.version}</version>
        <type>test-jar</type>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.apache.hadoop</groupId>
        <artifactId>hadoop-test</artifactId>
        <version>${hadoop.version}</version>
        <optional>true</optional>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>${junit.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-all</artifactId>
        <version>${mockito-all.version}</version>
        <scope>test</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
      <dependency>
      <groupId>org.apache.hbase</groupId>
      <artifactId>hbase</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-core</artifactId>
    </dependency>
    <!-- Things HBase needs...for some reason -->
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-core-asl</artifactId>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-mapper-asl</artifactId>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-jaxrs</artifactId>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-xc</artifactId>
    </dependency>
    <!-- Test Dependencies -->
    <dependency>
      <groupId>org.apache.hbase</groupId>
      <artifactId>hbase</artifactId>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-test</artifactId> 
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-all</artifactId>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.0</version>
          <configuration>
            <source>1.6</source>
            <target>1.6</target>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <!-- Run with -Dmaven.test.skip.exec=true to build -tests.jar without running 
        tests (this is needed for upstream projects whose tests need this jar simply for 
        compilation) -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>2.4</version>
        <executions>
          <execution>
            <phase>prepare-package
            </phase>
            <goals>
              <goal>test-jar</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <!-- Exclude these 2 packages, because their dependency _binary_ files 
            include the sources, and Maven 2.2 appears to add them to the sources to compile, 
            weird -->
          <excludes>
            <exclude>org/apache/jute/**</exclude>
            <exclude>org/apache/zookeeper/**</exclude>
            <exclude>**/*.jsp</exclude>
            <exclude>log4j.properties</exclude>
          </excludes>
        </configuration>
      </plugin>
      <!-- Make a source jar -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>2.2.1</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Specialized configuration for running tests -->
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${surefire.version}</version>
        <configuration>
          <forkedProcessTimeoutInSeconds>${test.timeout}</forkedProcessTimeoutInSeconds>
          <argLine>-enableassertions -Xmx1900m
            -Djava.security.egd=file:/dev/./urandom</argLine>
          <redirectTestOutputToFile>${test.output.tofile}</redirectTestOutputToFile>
          <!-- Each class is forked into its own, new JVM, each test being running serially. 
            This is a bit slower, but ensures the maximum amount of isolation. See 
            http://maven.apache.org/surefire/maven-surefire-plugin/examples/fork-options-and-parallel-execution.html 
            for more information. -->
          <forkCount>1</forkCount>
          <reuseForks>false</reuseForks>
          <parallel>none</parallel>
          <threadCount>1</threadCount>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <!-- Support hbase-0.94.9 and WAL Compression -->
    <profile>
      <id>hbase-0.94.9</id>
      <activation>
        <property>
          <name>hbase</name>
          <value>0.94.9</value>
        </property>
      </activation>
      <properties>
        <!-- TODO: Move to 0.94.9 when released -->
        <hbase.version>0.94.9-SNAPSHOT</hbase.version>
      </properties>
      <!-- Bring in the custom module -->
      <modules>
      <!-- TODO: Move 0.94.9 to ${hbase.version} when HBase 0.94.9 released -->
        <module>hbase-index-0.94.9-compat</module>
      </modules>
    </profile>
  </profiles>
</project>
