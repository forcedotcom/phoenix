<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.salesforce</groupId>
  <artifactId>phoenix</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>Phoenix</name>
  <description>Phoenix JDBC driver for HBase</description>

  <repositories>
    <repository>
      <id>codehaus</id>
      <name>Codehaus Public</name>
      <url>http://repository.codehaus.org/</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <releases>
        <enabled>true</enabled>
      </releases>
    </repository>
    <repository>
      <id>apache release</id>
      <url>https://repository.apache.org/content/repositories/releases/</url>
    </repository>
    <repository>
      <id>apache non-releases</id>
      <name>Apache non-releases</name>
      <url>http://people.apache.org/~stack/m2/repository</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <releases>
        <enabled>true</enabled>
      </releases>
    </repository>
  </repositories>

  <properties>
    <!-- General Properties -->
    <antlr-input.dir>src/main/antlr</antlr-input.dir>
    <antlr-output.dir>target/generated-sources/antlr</antlr-output.dir>
    <sql-output.dir>${antlr-output.dir}/phoenix/parse</sql-output.dir>

    <!-- Dependency versions -->
    <hbase.version>0.94.2</hbase.version>
    <commons-cli.version>1.2</commons-cli.version>
    <hadoop.version>1.0.4</hadoop.version>
    <junit.version>4.10</junit.version>
    <jackson.version>1.8.8</jackson.version>
    <antlr.version>3.2</antlr.version>
    <opencsv.version>2.3</opencsv.version>
    <log4j.version>1.2.16</log4j.version>
    <slf4j-api.version>1.4.3.jar</slf4j-api.version>
    <slf4j-log4j.version>1.4.3</slf4j-log4j.version>
    <protobuf-java.version>2.4.0a</protobuf-java.version>
    <commons-configuration.version>1.6</commons-configuration.version>
    <commons-io.version>2.1</commons-io.version>
    <commons-lang.version>2.5</commons-lang.version>
    <commons-logging.version>1.1.1</commons-logging.version>

    <!-- Plugin versions -->
    <antlr3-plugin.version>1.0</antlr3-plugin.version>
    <maven-eclipse-plugin.version>2.8</maven-eclipse-plugin.version>
    <maven-antrun-plugin.version>1.6</maven-antrun-plugin.version>
    <maven-build-helper-plugin.version>1.7</maven-build-helper-plugin.version>
  </properties>

  <build>
    <!-- This should go away and be a real mavenized layout -->
    <sourceDirectory>java/src</sourceDirectory>

    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.0</version>
          <configuration>
            <source>1.6</source>
            <target>1.6</target>
          </configuration>
        </plugin>
        <!--This plugin's configuration is used to store Eclipse m2e settings only. 
          It has no influence on the Maven build itself. -->
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <!-- Don't run ant task when rebuilding in eclipse -->
                  <pluginExecutionFilter>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <versionRange>[1.6,)</versionRange>
                    <goals>
                      <goal>run</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore />
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <!-- Compile the antlr sources -->
      <!-- Cheat by going out to ant to do this, but antlr3 plugin doens't compile 
        correctly, so have have to do this hacky way instead -->
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.6</version>
        <executions>
          <execution>
            <id>generateParser</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <ant antfile="${basedir}/src/build/build.xml">
                  <target name="generateParser" />
                </ant>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Add the ant-generated sources to the source path -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>${maven-build-helper-plugin.version}</version>
        <executions>
          <execution>
            <id>add-generated-sources</id>
            <phase>process-resources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${antlr-output.dir}</source>
                <source>src/main/antlr</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Run with -Dmaven.test.skip.exec=true to build -tests.jar without running 
        tests (this is needed for upstream projects whose tests need this jar simply for 
        compilation) -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>2.4</version>
        <executions>
          <execution>
            <phase>prepare-package
            </phase>
            <goals>
              <goal>test-jar</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <!-- Exclude these 2 packages, because their dependency _binary_ files 
            include the sources, and Maven 2.2 appears to add them to the sources to compile, 
            weird -->
          <excludes>
            <exclude>org/apache/jute/**</exclude>
            <exclude>org/apache/zookeeper/**</exclude>
            <exclude>**/*.jsp</exclude>
            <exclude>log4j.properties</exclude>
          </excludes>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>2.2.1</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Setup eclipse -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-eclipse-plugin</artifactId>
        <version>${maven-eclipse-plugin.version}</version>
        <configuration>
          <buildcommands>
            <buildcommand>org.jamon.project.templateBuilder</buildcommand>
            <buildcommand>org.eclipse.jdt.core.javabuilder</buildcommand>
          </buildcommands>
        </configuration>
      </plugin>
      <!-- Build the final assembly for the phoenix-client jar -->
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <id>client</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <archive>
                <index>true</index>
                <manifest>
                  <addClasspath>true</addClasspath>
                  <mainClass>phoenix.util.PhoenixRuntime</mainClass>
                  <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                  <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                </manifest>
              </archive>
              <descriptors>
                <descriptor>src/build/client.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
          <!-- to build the tarball, this assembly:single needs to be called from 
            the command line -->
          <execution>
            <id>package-to-tar</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <attach>false</attach>
              <tarLongFileMode>gnu</tarLongFileMode>
              <appendAssemblyId>false</appendAssemblyId>
              <descriptors>
                <descriptor>src/build/all.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <!-- Make sure we have all the antlr dependencies -->
    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>antlr</artifactId>
      <version>${antlr.version}</version>
    </dependency>
    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>antlr-runtime</artifactId>
      <version>${antlr.version}</version>
    </dependency>
    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>stringtemplate</artifactId>
      <version>${antlr.version}</version>
    </dependency>
    <dependency>
      <groupId>net.sf.opencsv</groupId>
      <artifactId>opencsv</artifactId>
      <version>${opencsv.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-core</artifactId>
      <version>${hadoop.version}</version>
      <optional>true</optional>
      <exclusions>
        <exclusion>
          <groupId>hsqldb</groupId>
          <artifactId>hsqldb</artifactId>
        </exclusion>
        <exclusion>
          <groupId>net.sf.kosmosfs</groupId>
          <artifactId>kfs</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.eclipse.jdt</groupId>
          <artifactId>core</artifactId>
        </exclusion>
        <exclusion>
          <groupId>net.java.dev.jets3t</groupId>
          <artifactId>jets3t</artifactId>
        </exclusion>
        <exclusion>
          <groupId>oro</groupId>
          <artifactId>oro</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.hbase</groupId>
      <artifactId>hbase</artifactId>
      <version>${hbase.version}</version>
    </dependency>

    <!-- Test Dependencies -->
    <dependency>
      <groupId>org.apache.hbase</groupId>
      <artifactId>hbase</artifactId>
      <version>${hbase.version}</version>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>
    <!-- Needed by HBase to run the minicluster -->
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-core-asl</artifactId>
      <version>${jackson.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-mapper-asl</artifactId>
      <version>${jackson.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-jaxrs</artifactId>
      <version>${jackson.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-xc</artifactId>
      <version>${jackson.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-test</artifactId>
      <version>${hadoop.version}</version>
      <optional>true</optional>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <reporting>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>antlr-maven-plugin</artifactId>
        <version>2.2</version>
        <configuration>
          <!-- Comma separated list of grammar files or pattern grammar files By 
            default, grammar file(s) is in ${basedir}/src/main/antlr -->
          <grammars>*.g</grammars>
        </configuration>
      </plugin>
    </plugins>
  </reporting>

</project>
